"use strict";
const fs = require("fs");
const obs = require("./obs_helper.js");

let matanbot_mention_count = 0;
let mlk_quote_num = 0;

const commands_json = fs.readFileSync("commands.json");
const added_commands = JSON.parse(commands_json).commands;
function saveCommands(commands) {
    let save_commands_json = {
        commands: commands,
    };

    fs.writeFileSync("commands.json", JSON.stringify(save_commands_json));
}

//every 5 minutes, save commands to persist usage counts
setInterval(() => saveCommands(added_commands), 5 * 60 * 1000);

function respondToMatanbotMention(user_info) {
    //random number 1 to 10
    const random_num = Math.floor(Math.random() * 10 + 1);
    let msg_out = "";

    matanbot_mention_count = matanbot_mention_count + 1;
    if (random_num > 9) {
        msg_out =
            "matanbot is currently under development, please excuse the lack of functionality";
    } else if (random_num > 8) {
        msg_out =
            "I'm so glad someone recognizes my potential as being the best bot on the channel";
    } else if (random_num > 6) {
        msg_out = "I am a juggle bot, that is all I am";
    } else {
        msg_out = "hi " + user_info.username + "!";
    }
    if (matanbot_mention_count % 11 == 0) {
        return `yall said my name ${count.toString()} times? wow!`;
    } else {
        return msg_out;
    }
}

//make not case sensitive
const changeGreenScreenBackground = async (image_request) => {
    let images = [
        { obs_name: "pool", command_name: "pool" },
        { obs_name: "tile-gradient", command_name: "tile" },
        { obs_name: "earth stock", command_name: "earth" },
        { obs_name: "duck", command_name: "duck" },
        { obs_name: "universe 1", command_name: "universe" },
        { obs_name: "invisible", command_name: "invisible" },
        { obs_name: "tornado", command_name: "fire" },
        { obs_name: "rainbow", command_name: "rainbow" },
        { obs_name: "static", command_name: "static" }
    ];

    for (let image of images) {
        if (image_request === image.command_name) {
            try {
                if (await obs.switchGreenScreenBG(image.obs_name)) {
                    return `Background has been changed.`;
                } else {
                    return `Cannot change background right now.`;
                }
            } catch (err) {
                console.log(err);
            }
        }
    }

    //cannot find matching image, tell user what possible image names are
    return `Possible backgrounds are, pool, tile, earth, duck, universe, invisible, fire, rainbow, static. E.g. !background duck`;
};

function mlk_quote() {
    const quotes = [
        "I have a dream that one day this nation will rise up and live out the true meaning of its creed: We hold these truths to be self-evident that all men are created equal. I have a dream that my four little children will one day live in a nation where they will not be judged by the color of their skin but by the content of their character. I have a dream today.",
        "The ultimate measure of a man is not where he stands in moments of comfort and convenience, but where he stands at times of challenge and controversy.",
        "Injustice anywhere is a threat to justice everywhere.",
        "The time is always right to do what is right.",
        "I have decided to stick with love. Hate is too great a burden to bear.",
        "Darkness can not drive out darkness; only light can do that. Hate cannot drive out hate; only love can do that.",
        "Nothing in the world is more dangerous than sincere ignorance and conscientious stupidity.",
        "There can be no deep disappointment where there is not deep love.",
        "I have a dream that one day this nation will rise up and live out the true meaning of its creed; We hold these truths to be self-evident: that all men are created equal",
        "Morality cannot be legislated, but behavior can be regulated. Judicial decrees may not change the heart, but they can restrain the heartless.",
        "Everybody can be great... because anybody can serve. You don't have to have a college degree to serve. You don't have to make your subject and verb agree to serve. you only need a heart full of grace. a soul generated by love.",
        "He who passively accepts evil is as much involved in it as he who helps to perpetrate it.",
        "Riots are the voices of the unheard.",
        "I must confess that over the past few years I have been gravely disappointed with the white moderate. I have almost reached the regrettable conclusion that the Negro's great stumbling block in his stride toward freedom is not the White Citizen's Counciler or the Ku Klux Klanner, but the white moderate, who is more devoted to 'order' than to justice; who prefers a negative peace which is the absence of tension to a positive peace which is the presence of justice [...]",
    ];

    mlk_quote_num = (mlk_quote_num + 1) % quotes.length;
    return `${quotes[mlk_quote_num]} - Martin Luther King Jr.`;
}

function addCommand(user_info, user_parameters) {
    if (user_parameters.length < 2) {
        return `Mods can add a command with !add {command} {response} {+m for mod only}`;
    }

    const now = new Date(Date.now());
    const mod_only = user_parameters[user_parameters.length - 1] === `+m`;
    if (mod_only) {
        user_parameters.pop(); //remove +m from response message
    }

    const new_command = {
        command_word: user_parameters.shift(),
        response_array: user_parameters,
        mod_only: mod_only,
        added_by: user_info["display-name"],
        added_timestamp: `${
            now.getMonth() + 1
        }-${now.getDate()}, ${now.getFullYear()}`,
        usage_count: 0,
    };

    if (
        !added_commands.find(
            (command) => command.command_word === new_command.command_word
        )
    ) {
        added_commands.push(new_command);
        saveCommands(added_commands);
        return `Added !${new_command.command_word}`
    } else {
        return `!${new_command.command_word} already exists. Use !edit to change it.`
    }

}

function editCommand(user_parameters) {
    if (user_parameters.length < 2) {
        return `Mods can edit an existing command with !edit {command} {response} {+m for mod only}. Must add +m for command to stay mod only.`;
    }

    const command_word = user_parameters.shift();
    const edit_command = added_commands.find((command) => command.command_word === command_word);
    if (!edit_command) {
        return `!${command_word} is not an existing command.`
    }

    const mod_only = user_parameters[user_parameters.length - 1] === `+m`;
    if (mod_only) {
        user_parameters.pop(); //remove +m from response message
    }
    edit_command.mod_only = mod_only;
    edit_command.response = user_parameters;
    saveCommands(added_commands);

    return `Edited !${edit_command.command_word}`
}

// Called every time a message comes in
const message_main = async (user_info, user_msg) => {
    // Remove whitespace from chat message
    let user_command = user_msg.trim().toLowerCase();

    if (user_command.search("clap") != -1) {
        obs.showHeartEyes();
    }
    if (user_command.search("discord") != -1) {
        return "Did someone say discord? Join Matan's discord to get updates on stream schedule, juggling advice, hangout and all around have a good time! https://discord.gg/bNUaFRE";
    }
    if (user_command.search("matanbot") != -1) {
        return respondToMatanbotMention(user_info);
    }

    const user_parameters = user_msg.split(" ");
    user_command = user_parameters.shift().toLowerCase();
    const mod_privileges = user_info.mod || user_info.badges.broadcaster === `1`;

    if (user_command === "!background" || user_command === "!bg") {
        return await changeGreenScreenBackground(user_parameters[0]);
    }

    if (user_command === "!mlk") {
        return mlk_quote();
    }

    if (
        mod_privileges &&
        (user_command === `!add` || user_command === `!addCommand`)
    ) {
        return addCommand(user_info, user_parameters);
    }

    if (
        mod_privileges &&
        (user_command === `!edit` || user_command === `!editCommand`)
    ) {
        return editCommand(user_parameters);
    }

    for (let added_command of added_commands) {
        if (user_command === `!${added_command.command_word}`) {
            if (!added_command.mod_only || mod_privileges) {
                if (user_parameters[0] === `count`) {
                    return `${user_command} has been used ${added_command.usage_count} times.`;
                } else if (user_parameters[0] === `age`) {
                    return `${user_command} was added on ${added_command.added_date} by ${added_command.added_by}.`;
                } else {
                    added_command.usage_count = added_command.usage_count + 1;

                    return added_command.response_array.reduce((cur_value, add_value) => {
                        if (add_value === `{count}`) {
                            return `${cur_value} ${added_command.usage_count}`
                        } else {
                            return `${cur_value} ${add_value}`
                        }
                    }, "");
                }
            }
        }
    }
};

module.exports = { message_main: message_main };
