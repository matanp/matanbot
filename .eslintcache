[{"C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\index.js":"1","C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\overlay_main.js":"2","C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\twitch_main.js":"3","C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\twitch_logger.js":"4","C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\bot_brain.js":"5"},{"size":280,"mtime":1608516663698,"results":"6","hashOfConfig":"7"},{"size":514,"mtime":1608516605867,"results":"8","hashOfConfig":"7"},{"size":1833,"mtime":1608516825252,"results":"9","hashOfConfig":"7"},{"size":1617,"mtime":1608515418532,"results":"10","hashOfConfig":"7"},{"size":1318,"mtime":1608515443920,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1p7u90r",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\index.js",[],[],"C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\overlay_main.js",[],"C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\twitch_main.js",["25","26"],"'use strict';\r\n//let linter know process is a global var in node\r\n/* global process */\r\n\r\nrequire('dotenv').config();\r\nconst { exec } = require('child_process');\r\n\r\n//twitch client\r\nconst tmi = require('tmi.js');\r\n\r\n//general logger and twitch logger\r\n//const { logger } = require('./general_logger.js');\r\nconst { twitch_log } = require('./twitch_logger.js');\r\n\r\n//and we need the bot\r\nconst { bot } = require('./bot_brain.js');\r\nconst { executionAsyncId } = require('async_hooks');\r\n\r\n// Define configuration options from env file\r\nconst opts = {\r\n  identity: {\r\n    username: process.env.USER,\r\n    password: process.env.OATH\r\n  },\r\n  channels: [\r\n    process.env.CHANNEL\r\n  ]\r\n};\r\n\r\n// Create a Twitch client with options\r\nconst client = new tmi.client(opts);\r\n\r\n// Register event handlers (defined below)\r\nclient.on('message', onMessageHandler);\r\nclient.on('connected', onConnectedHandler);\r\n\r\nconsole.log(client);\r\n\r\n// Connect to Twitch:\r\n//client.connect();\r\n\r\n// Called every time a message comes in\r\n// target is the twitch channel the message is coming from\r\n// context is information about the user -- see example_context\r\n// msg is the actual message\r\n// self is a boolean of if the message is coming from this client\r\nfunction onMessageHandler (target, context, msg, self) {\r\n  twitch_log.message({username: context.username, message: msg});\r\n  if (self) { return; }\r\n    //console.log(target);\r\n    //console.log(context);\r\n    //console.log(msg);\r\n    let response = bot(context, msg);\r\n    if (response) {\r\n      client.say(target, response);\r\n    }\r\n\r\n}\r\n\r\n// Called every time the bot connects to Twitch chat\r\nfunction onConnectedHandler (addr, port) {\r\n    console.log(`* Connected to ${addr}:${port}`);\r\n    exec('./jlab.bat togif 945 -out /public/jugglinglab/ss.gif');\r\n}\r\n\r\nmodule.exports = { twitch: client }\r\n","C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\twitch_logger.js",["27","28"],"//code modified from https://thisdavej.com/using-winston-a-versatile-logging-library-for-node-js/\r\n'use strict';\r\nconst { createLogger, format, transports } = require('winston');\r\nrequire('winston-daily-rotate-file');\r\nconst logDir = 'twitch-chat-history';\r\n\r\nconst logger_levels = {\r\n  levels: {\r\n    message: 0,\r\n    user: 1,\r\n    misc: 2\r\n  }\r\n}\r\n\r\nvar messageOut = new transports.DailyRotateFile({\r\n    filename: `${logDir}/chat/%DATE%-chat.log`,\r\n    datePattern: 'YYYY-MM-DD',\r\n    maxSize: '25m',\r\n    format: format.json(),\r\n    level: 'message'\r\n});\r\n\r\nvar usersOut = new transports.DailyRotateFile({\r\n  filename: `${logDir}/users/%DATE%-users.log`,\r\n  datePattern: 'YYYY-MM-DD',\r\n  maxSize: '25m',\r\n  format: format.json(),\r\n  level: 'user'\r\n});\r\n\r\n\r\nmessageOut.on('rotate', function(oldFilename, newFilename) {\r\n    //sloppy but I don't anticipate needing overflow files\r\n    newFilename = `${oldFilename}_overflow`\r\n});\r\n\r\nusersOut.on('rotate', function(oldFilename, newFilename) {\r\n  //sloppy but I don't anticipate needing overflow files\r\n  newFilename = `${oldFilename}_overflow`\r\n});\r\n\r\n\r\nconst twitch_log = createLogger({\r\n    format: format.combine(\r\n    format.timestamp({\r\n        format: 'YYYY-MM-DD HH:mm:ss'\r\n    }),\r\n    format.json()\r\n    ),\r\n    transports: [\r\n    new transports.Console({\r\n        level: 'misc',\r\n        format: format.combine(\r\n        format.printf(\r\n            info => `${info.timestamp} ${info.level}: ${info.message}`\r\n        )\r\n        )\r\n    }),\r\n    messageOut,\r\n    usersOut\r\n    ],\r\n    levels: logger_levels.levels\r\n});\r\n\r\nmodule.exports = { twitch_log } \r\n\r\n","C:\\Users\\mpres\\Documents\\GitHub\\matanbot\\src\\bot_brain.js",[],{"ruleId":"29","severity":2,"message":"30","line":3,"column":11,"nodeType":"31","messageId":"32","endLine":3,"endColumn":18},{"ruleId":"33","severity":2,"message":"34","line":17,"column":9,"nodeType":"35","messageId":"36","endLine":17,"endColumn":25},{"ruleId":"33","severity":2,"message":"37","line":34,"column":5,"nodeType":"35","messageId":"36","endLine":34,"endColumn":16},{"ruleId":"33","severity":2,"message":"37","line":39,"column":3,"nodeType":"35","messageId":"36","endLine":39,"endColumn":14},"no-redeclare","'process' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","no-unused-vars","'executionAsyncId' is assigned a value but never used.","Identifier","unusedVar","'newFilename' is assigned a value but never used."]